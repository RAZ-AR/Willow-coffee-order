import { useState, useEffect, useCallback } from 'react';
import { LS_KEYS } from '../constants';
import { toNumber } from '../utils';
import { useApi } from './useApi';

interface UseLoyaltyParams {
  tg: any;
  currentTgId: string | null;
  hasRealTgData: boolean;
  tgWebAppData?: string | null;
}

export const useLoyalty = ({ tg, currentTgId, hasRealTgData, tgWebAppData }: UseLoyaltyParams) => {
  // –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑ LS —Å—Ä–∞–∑—É - –∂–¥–µ–º –æ—Ç–≤–µ—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [cardNumber, setCardNumber] = useState<string>("");
  const [stars, setStars] = useState<number>(0);
  const [isLoadingCard, setIsLoadingCard] = useState<boolean>(true);

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const savedCard = localStorage.getItem(LS_KEYS.card);
    const savedOwner = localStorage.getItem(LS_KEYS.owner);

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞, –Ω–æ –Ω–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω - –æ—á–∏—â–∞–µ–º
    if (savedCard && (!savedOwner || !currentTgId)) {
      console.log('üßπ Aggressive cache clear - removing orphaned card data');
      localStorage.removeItem(LS_KEYS.card);
      localStorage.removeItem(LS_KEYS.stars);
      localStorage.removeItem(LS_KEYS.owner);
    }
  }, [currentTgId]);
  const [lastRegisterResp, setLastRegisterResp] = useState<any>(null);
  const [lastStarsResp, setLastStarsResp] = useState<any>(null);

  const api = useApi({ tg, currentTgId, hasRealTgData, tgWebAppData });

  // –û—á–∏—Å—Ç–∫–∞ –ø–æ —Ñ–ª–∞–≥—É ?reset=1 –ò–õ–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∫–∞—Ä—Ç
  useEffect(() => {
    try {
      const qs = new URLSearchParams(window.location.search);
      const shouldReset = qs.has("reset") && qs.get("reset") === "1";

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–∞—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
      const savedOwner = localStorage.getItem(LS_KEYS.owner);
      const savedCard = localStorage.getItem(LS_KEYS.card);

      if (shouldReset) {
        console.log('üßπ Reset flag detected - clearing all local data');
        localStorage.removeItem(LS_KEYS.card);
        localStorage.removeItem(LS_KEYS.stars);
        localStorage.removeItem(LS_KEYS.cart);
        localStorage.removeItem(LS_KEYS.owner);
        setCardNumber("");
        setStars(0);
      } else if (savedCard && !savedOwner) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç–∞, –Ω–æ –Ω–µ—Ç owner - –æ—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—É
        console.log('üßπ Found orphaned card without owner - clearing');
        localStorage.removeItem(LS_KEYS.card);
        localStorage.removeItem(LS_KEYS.stars);
        setCardNumber("");
        setStars(0);
      }

      console.log('üíæ Initial localStorage state:', {
        card: localStorage.getItem(LS_KEYS.card),
        stars: localStorage.getItem(LS_KEYS.stars),
        owner: localStorage.getItem(LS_KEYS.owner),
      });
    } catch {}
  }, []);

  // –°–º–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ ‚Üí —Å–±—Ä–æ—Å –ª–æ–∫–∞–ª–∫–∏, –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (!currentTgId) return;

    const owner = localStorage.getItem(LS_KEYS.owner);

    if (owner && owner !== currentTgId) {
      console.log('üîÑ Owner changed from', owner, 'to', currentTgId, '- clearing cache');
      localStorage.removeItem(LS_KEYS.card);
      localStorage.removeItem(LS_KEYS.stars);
      setCardNumber("");
      setStars(0);
      localStorage.setItem(LS_KEYS.owner, currentTgId);
    } else if (!owner) {
      console.log('üÜï Setting owner to', currentTgId);
      localStorage.setItem(LS_KEYS.owner, currentTgId);
    } else if (owner === currentTgId) {
      // –¢–æ—Ç –∂–µ –≤–ª–∞–¥–µ–ª–µ—Ü - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ LS
      const savedCard = localStorage.getItem(LS_KEYS.card);
      const savedStars = localStorage.getItem(LS_KEYS.stars);

      if (savedCard && /^\d{4}$/.test(savedCard)) {
        console.log('üîÑ Restoring saved card for same owner:', savedCard);
        setCardNumber(savedCard);
        setStars(toNumber(savedStars, 0));
      }
    }
  }, [currentTgId]);

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    let aborted = false;

    const tryRegister = async () => {
      console.log('üéØ useLoyalty: Attempting registration...', { currentTgId, hasRealTgData });
      const resp = await api.register();
      console.log('üéØ useLoyalty: Registration response:', resp);
      setLastRegisterResp(resp);

      if (aborted || !resp) {
        console.log('‚ùå useLoyalty: Registration aborted or no response');
        setIsLoadingCard(false);
        return;
      }

      if (resp?.card) {
        const cardStr = String(resp.card);
        console.log('‚úÖ useLoyalty: Got card number:', cardStr);
        console.log('üíæ useLoyalty: Saving card to localStorage');
        setCardNumber(cardStr);
        localStorage.setItem(LS_KEYS.card, cardStr);

        // –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
        const saved = localStorage.getItem(LS_KEYS.card);
        console.log('‚úîÔ∏è useLoyalty: Card saved successfully:', saved);
      }

      if (typeof resp?.stars === "number") {
        console.log('‚úÖ useLoyalty: Got stars:', resp.stars);
        setStars(resp.stars);
        localStorage.setItem(LS_KEYS.stars, String(resp.stars));
      }

      setIsLoadingCard(false);
    };

    if (currentTgId && !aborted) {
      tryRegister();
    }

    return () => {
      aborted = true;
    };
  }, [currentTgId]); // –£–±—Ä–∞–ª api –∏–∑ dependencies —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤

  // –ü—É–ª–ª–∏–Ω–≥ card/stars –∫–∞–∂–¥—ã–µ 15s
  useEffect(() => {
    if (!hasRealTgData || (!currentTgId && !tg?.initData)) return;
    
    const interval = setInterval(async () => {
      try {
        const resp = await api.getStars();
        setLastStarsResp(resp);
        if (!resp) return;

        if (resp?.card && resp.card !== cardNumber) {
          console.log('üîÑ Card updated from', cardNumber, 'to', resp.card);
          setCardNumber(String(resp.card));
          localStorage.setItem(LS_KEYS.card, String(resp.card));
        }
        if (typeof resp?.stars === "number" && resp.stars !== stars) {
          setStars(resp.stars);
          localStorage.setItem(LS_KEYS.stars, String(resp.stars));
        }
      } catch (error) {
        setLastStarsResp({ error: "network_or_cors" });
      }
    }, 15000);
    
    return () => clearInterval(interval);
  }, [currentTgId, cardNumber, stars, hasRealTgData, tg, api]);

  const updateStars = useCallback((newStars: number) => {
    setStars(newStars);
    localStorage.setItem(LS_KEYS.stars, String(newStars));
  }, []);

  return {
    cardNumber,
    stars,
    isLoadingCard,
    lastRegisterResp,
    lastStarsResp,
    updateStars
  };
};
