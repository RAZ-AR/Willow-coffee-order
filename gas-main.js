/***************
 * Willow Mini-app ‚Äî Google Apps Script backend (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
 * - –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–´–ï 4-–∑–Ω–∞—á–Ω—ã–µ –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ (1000-9999)
 * - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–ø–∏—Å—å—é –Ω–æ–º–µ—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É
 * - –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ Telegram WebApp initData
 * - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
 ***************/

var __SS = null; // cache Spreadsheet handle

function _prop(key, def) {
  try { return PropertiesService.getScriptProperties().getProperty(key) || def; }
  catch (e) { return def; }
}

function _ss() {
  if (__SS) return __SS;
  var id = _prop('SPREADSHEET_ID', null);
  if (!id) throw new Error('SPREADSHEET_ID is not set in Script Properties');
  __SS = SpreadsheetApp.openById(id);
  return __SS;
}

function getSheet_(name) {
  var ss = _ss();
  var sheet = ss.getSheetByName(name);
  if (!sheet) {
    sheet = ss.insertSheet(name);
  }
  return sheet;
}

function ensureHeaders_() {
  var shCards = getSheet_('Cards');   
  if (shCards.getLastRow() === 0) {
    shCards.appendRow(['telegram_id', 'card_number', 'username', 'first_name', 'created_at']);
  }
  
  // –¢–∞–±–ª–∏—Ü–∞ Users –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
  // var shUsers = getSheet_('Users');
  // if (shUsers.getLastRow() === 0) {
  //   shUsers.appendRow(['telegram_id', 'username', 'card_number', 'stars', 'created_at']);
  // }
  
  var shOrders= getSheet_('Orders');  
  if (shOrders.getLastRow() === 0) {
    shOrders.appendRow(['order_id', 'telegram_id', 'card_number', 'total', 'when', 'table', 'payment', 'items_json', 'created_at']);
  }
  
  var shLog   = getSheet_('StarsLog');
  if (shLog.getLastRow() === 0) {
    shLog.appendRow(['card_number', 'delta', 'reason', 'created_at']);
  }
}

function json(o) { 
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON –∫–∞–∫ plain text (CORS –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è GAS)
  const jsonStr = JSON.stringify(o);
  return ContentService
    .createTextOutput(jsonStr)
    .setMimeType(ContentService.MimeType.JSON);
}

function simpleOk() {
  // –ü—Ä–æ—Å—Ç–æ–π HTML –æ—Ç–≤–µ—Ç –¥–ª—è Telegram webhook (–±–µ–∑ –ª–∏—à–Ω–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
  return HtmlService.createHtmlOutput("OK");
}

/** ===== i18n ===== */
function langFromUser_(tgUser) {
  var code = (tgUser && tgUser.language_code) || '';
  if (/^ru/i.test(code)) return 'ru';
  if (/^sr/i.test(code)) return 'sr';
  return 'en';
}

function t_(k, lang) {
  var d = {
    greet: {
      en: 'Welcome to Willow! Your loyalty card:',
      ru: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Willow! –í–∞—à–∞ –∫–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:',
      sr: 'Dobrodo≈°li u Willow! Va≈°a kartica lojalnosti:'
    },
    youCard: { en: 'Card', ru: '–ö–∞—Ä—Ç–∞', sr: 'Kartica' },
    orderReceived: {
      en: 'Your order is received. We are starting to prepare!',
      ru: '–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –≥–æ—Ç–æ–≤–∏—Ç—å!',
      sr: 'Va≈°a porud≈æbina je primljena. Poƒçinjemo sa pripremom!'
    },
    newOrder: { en: 'New order', ru: '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑', sr: 'Nova porud≈æbina' },
    sum: { en: 'Sum', ru: '–°—É–º–º–∞', sr: 'Iznos' },
    when: { en: 'When', ru: '–ö–æ–≥–¥–∞', sr: 'Kada' },
    table: { en: 'table', ru: '—Å—Ç–æ–ª', sr: 'sto' },
    payment: { en: 'Payment', ru: '–û–ø–ª–∞—Ç–∞', sr: 'Plaƒáanje' },
    items: { en: 'Items', ru: '–ü–æ–∑–∏—Ü–∏–∏', sr: 'Stavke' }
  };
  return (d[k] && d[k][lang]) || (d[k] && d[k].en) || k;
}

/** ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–ê–†–°–ò–ù–ì–ê initData ===== */
function parseInitUser_(initData) {
  console.log("üîç parseInitUser_ called with:", initData);
  try {
    if (!initData || typeof initData !== 'string') return null;
    
    // –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã –∏ –ø—Ä–æ–±–µ–ª—ã
    var raw = String(initData).trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã initData
    var parts = raw.split('&');
    var params = {};
    
    for (var i = 0; i < parts.length; i++) {
      var kv = parts[i].split('=');
      if (kv.length >= 2) {
        var key = decodeURIComponent(kv[0]);
        var value = decodeURIComponent(kv.slice(1).join('='));
        params[key] = value;
      }
    }
    
    // –ò—â–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä user
    if (params.user) {
      try {
        var user = JSON.parse(params.user);
        console.log("‚úÖ Parsed user from initData:", user);
        if (user && user.id) {
          return {
            id: Number(user.id),
            username: user.username || '',
            first_name: user.first_name || '',
            language_code: user.language_code || 'en'
          };
        }
      } catch (parseError) {
        console.log("‚ùå Error parsing user JSON:", parseError);
      }
    }
    
    console.log("‚ùå No valid user found in initData");
    return null;
  } catch (e) {
    console.log("‚ùå Error in parseInitUser_:", e);
    return null;
  }
}

/** ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –ù–û–ú–ï–†–û–í –ö–ê–†–¢ ===== */
function nextCardNumber_() {
  console.log("üéØ Generating 4-digit card number...");
  
  var sh = getSheet_('Cards');
  var existingCards = new Set();
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç
  try {
    var lastRow = sh.getLastRow();
    if (lastRow > 1) {
      var cardRange = sh.getRange(2, 2, lastRow - 1, 1);
      var cardValues = cardRange.getValues();
      
      for (var i = 0; i < cardValues.length; i++) {
        var cardNum = String(cardValues[i][0]).trim();
        if (cardNum && cardNum !== '' && cardNum !== 'undefined' && cardNum.length === 4) {
          existingCards.add(cardNum);
        }
      }
    }
  } catch (e) {
    console.log("Error reading existing cards:", e);
  }
  
  console.log("üìä Found", existingCards.size, "existing cards");
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π 4-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä (1000-9999)
  var attempts = 0;
  var maxAttempts = 100;
  
  while (attempts < maxAttempts) {
    var randomNum = Math.floor(Math.random() * 9000) + 1000;
    var newCard = String(randomNum);
    
    if (!existingCards.has(newCard)) {
      console.log("‚úÖ Generated unique card:", newCard);
      return newCard;
    }
    attempts++;
  }
  
  // –ï—Å–ª–∏ —Å–ª—É—á–∞–π–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—â–µ–º –ø–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä
  console.log("‚ö†Ô∏è Random generation failed, searching systematically...");
  for (var num = 1000; num <= 9999; num++) {
    var testCard = String(num);
    if (!existingCards.has(testCard)) {
      console.log("‚úÖ Found free card:", testCard);
      return testCard;
    }
  }
  
  throw new Error("All 4-digit card numbers are taken!");
}

/** ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ===== */
function findCardByTelegramId_(telegramId) {
  var sh = getSheet_('Cards');
  var lastRow = sh.getLastRow();

  if (lastRow <= 1) return null;

  var data = sh.getRange(2, 1, lastRow - 1, 5).getValues();

  // –ò—â–µ–º –ü–û–°–õ–ï–î–ù–Æ–Æ (—Å–∞–º—É—é –Ω–æ–≤—É—é) –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  var foundCard = null;
  for (var i = 0; i < data.length; i++) {
    if (String(data[i][0]) === String(telegramId)) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤–∞–ª–∏–¥–Ω—ã–π (4 —Ü–∏—Ñ—Ä—ã)
      var cardNum = String(data[i][1]).trim();
      if (cardNum && cardNum.length === 4 && /^\d{4}$/.test(cardNum)) {
        foundCard = {
          row: i + 2,
          telegramId: data[i][0],
          cardNumber: cardNum,
          username: data[i][2],
          firstName: data[i][3],
          createdAt: data[i][4]
        };
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª - –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–∞–ª–∏–¥–Ω—É—é –∫–∞—Ä—Ç—É
      }
    }
  }

  return foundCard;
}

function cleanupDuplicateCards_(telegramId) {
  var sh = getSheet_('Cards');
  var lastRow = sh.getLastRow();

  if (lastRow <= 1) return;

  var data = sh.getRange(2, 1, lastRow - 1, 5).getValues();
  var cardsForUser = [];

  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  for (var i = 0; i < data.length; i++) {
    if (String(data[i][0]) === String(telegramId)) {
      cardsForUser.push({
        row: i + 2,
        cardNumber: String(data[i][1]).trim(),
        createdAt: data[i][4]
      });
    }
  }

  if (cardsForUser.length <= 1) return; // –ù–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

  // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–∞–ª–∏–¥–Ω—É—é –∫–∞—Ä—Ç—É
  cardsForUser.sort(function(a, b) {
    return new Date(b.createdAt) - new Date(a.createdAt);
  });

  var keepCard = null;
  for (var j = 0; j < cardsForUser.length; j++) {
    if (cardsForUser[j].cardNumber.length === 4 && /^\d{4}$/.test(cardsForUser[j].cardNumber)) {
      keepCard = cardsForUser[j];
      break;
    }
  }

  if (!keepCard) return;

  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã)
  var rowsToDelete = [];
  for (var k = 0; k < cardsForUser.length; k++) {
    if (cardsForUser[k].row !== keepCard.row) {
      rowsToDelete.push(cardsForUser[k].row);
    }
  }

  rowsToDelete.sort(function(a, b) { return b - a; }); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é

  for (var r = 0; r < rowsToDelete.length; r++) {
    sh.deleteRow(rowsToDelete[r]);
    console.log("üóëÔ∏è Deleted duplicate card at row:", rowsToDelete[r]);
  }
}

function getOrCreateCardForUser_(tgUser, sendNotification) {
  console.log("üîÑ getOrCreateCardForUser_ for:", tgUser);
  ensureHeaders_();

  if (!tgUser || !tgUser.id) {
    throw new Error('No telegram user ID provided');
  }

  // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  cleanupDuplicateCards_(tgUser.id);

  // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç—É
  var existingCard = findCardByTelegramId_(tgUser.id);
  
  if (existingCard && existingCard.cardNumber && existingCard.cardNumber.length === 4) {
    console.log("‚úÖ Found existing card:", existingCard.cardNumber, "for user", tgUser.id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–∂–µ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ä—Ç –ø—Ä–∏ /start
    if (sendNotification !== false) {
      sendWelcomeMessage_(tgUser, existingCard.cardNumber);
    }
    
    return existingCard.cardNumber;
  }
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
  var newCardNumber = nextCardNumber_();
  
  var cardsSheet = getSheet_('Cards');
  var newRowData = [
    tgUser.id,
    newCardNumber,
    tgUser.username || '',
    tgUser.first_name || '',
    new Date()
  ];
  
  if (existingCard) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
    cardsSheet.getRange(existingCard.row, 1, 1, 5).setValues([newRowData]);
    console.log("üîÑ Updated existing card row with new card:", newCardNumber);
  } else {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    cardsSheet.appendRow(newRowData);
    console.log("‚ûï Created new card record:", newCardNumber);
  }
  
  // –¢–∞–±–ª–∏—Ü–∞ Users –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –≤ Cards –∏ StarsLog
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ /start)
  if (sendNotification !== false) {
    sendWelcomeMessage_(tgUser, newCardNumber);
  }
  
  return newCardNumber;
}

function sendWelcomeMessage_(user, cardNumber) {
  var stars = getCardStars_(cardNumber); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É StarsLog
  var lang = langFromUser_(user);
  var nick = user.username ? '@' + user.username : (user.first_name || 'friend');
  
  var html = [
    '<b>Hi, ' + nick + '!</b>',
    t_('greet', lang),
    '<b>' + t_('youCard', lang) + ':</b> #' + cardNumber,
    '‚≠ê <b>' + stars + '</b>'
  ].join('\n');
  
  tgSendHTML_(user.id, html);
}

function updateUserRecord_(tgUser, cardNumber) {
  var usersSheet = getSheet_('Users');
  var lastRow = usersSheet.getLastRow();
  
  // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (lastRow > 1) {
    var userData = usersSheet.getRange(2, 1, lastRow - 1, 5).getValues();
    
    for (var i = 0; i < userData.length; i++) {
      if (String(userData[i][0]) === String(tgUser.id)) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å (–±–µ–∑ –∑–≤–µ–∑–¥ - –æ–Ω–∏ —Ç–µ–ø–µ—Ä—å –≤ StarsLog)
        var updateRow = i + 2;
        usersSheet.getRange(updateRow, 1, 1, 5).setValues([[
          tgUser.id,
          tgUser.username || '',
          cardNumber,
          0, // –ó–≤–µ–∑–¥—ã –±–æ–ª—å—à–µ –Ω–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ Users (—Ç–æ–ª—å–∫–æ –≤ StarsLog)
          userData[i][4] || new Date() // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
        ]]);
        console.log("üîÑ Updated user record for:", tgUser.id);
        return updateRow;
      }
    }
  }
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
  usersSheet.appendRow([
    tgUser.id,
    tgUser.username || '',
    cardNumber,
    0,
    new Date()
  ]);
  
  console.log("‚ûï Created new user record for:", tgUser.id);
  return usersSheet.getLastRow();
}

function getUserStars_(telegramId) {
  // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram ID
  const card = findCardByTelegramId_(telegramId);
  if (!card || !card.cardNumber) {
    console.log(`‚ùå No card found for telegram ID: ${telegramId}`);
    return 0;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã –∏–∑ StarsLog
  return getCardStars_(card.cardNumber);
}

/** ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï TELEGRAM –§–£–ù–ö–¶–ò–ò ===== */
function tgSendHTML_(chatId, html) {
  var token = _prop('TELEGRAM_TOKEN', '');
  if (!token || !chatId) {
    console.log("‚ùå No token or chatId for sending message");
    return { ok: false, reason: 'no token/chatId' };
  }
  
  try {
    var res = UrlFetchApp.fetch('https://api.telegram.org/bot' + token + '/sendMessage', {
      method: 'post',
      payload: {
        chat_id: String(chatId),
        text: String(html),
        parse_mode: 'HTML',
        disable_web_page_preview: true
      },
      muteHttpExceptions: true
    });
    
    var responseText = res.getContentText();
    
    var js = {};
    try { 
      js = JSON.parse(responseText); 
    } catch(e) {
      console.log("‚ùå Failed to parse Telegram response:", e);
    }
    
    if (js.ok) {
      console.log("‚úÖ Message sent successfully");
      return { ok: true };
    } else {
      console.log("‚ùå Telegram API error:", js.description || responseText);
      return { ok: false, reason: js.description || responseText };
    }
  } catch (e) {
    console.log("‚ùå Error sending Telegram message:", e);
    return { ok: false, reason: String(e) };
  }
}

/** ===== –°–ò–°–¢–ï–ú–ê –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø –ó–í–ï–ó–î ===== */

function calculateStarsForAmount_(totalAmount) {
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
  const amount = typeof totalAmount === 'string' ? parseFloat(totalAmount) : totalAmount;
  
  if (amount <= 0) return 0;
  
  // –°–∏—Å—Ç–µ–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–≤–µ–∑–¥:
  // 1-350 –¥–∏–Ω–∞—Ä = 1 –∑–≤–µ–∑–¥–∞
  // 351-700 –¥–∏–Ω–∞—Ä = 2 –∑–≤–µ–∑–¥—ã  
  // 701-1050 –¥–∏–Ω–∞—Ä = 3 –∑–≤–µ–∑–¥—ã
  // –ò —Ç–∞–∫ –¥–∞–ª–µ–µ...
  
  // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞: –æ–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 350
  const starsEarned = Math.ceil(amount / 350);
  return Math.max(1, starsEarned); // –ú–∏–Ω–∏–º—É–º 1 –∑–≤–µ–∑–¥–∞ –∑–∞ –ª—é–±–æ–π –∑–∞–∫–∞–∑
}

function addStarsToCard_(cardNumber, starsToAdd, reason) {
  console.log(`‚≠ê Adding ${starsToAdd} stars to card ${cardNumber}, reason: ${reason}`);
  
  if (!cardNumber || starsToAdd <= 0) {
    console.log("‚ùå Invalid card number or stars amount");
    return false;
  }
  
  try {
    ensureHeaders_();
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ StarsLog
    const starsLogSheet = getSheet_('StarsLog');
    starsLogSheet.appendRow([
      cardNumber,
      starsToAdd,
      reason,
      new Date()
    ]);
    
    console.log("‚úÖ Stars logged successfully");
    return true;
  } catch (error) {
    console.log("‚ùå Error adding stars:", error);
    return false;
  }
}

function getCardStars_(cardNumber) {
  if (!cardNumber) return 0;
  
  try {
    ensureHeaders_();
    const starsLogSheet = getSheet_('StarsLog');
    const lastRow = starsLogSheet.getLastRow();
    
    if (lastRow <= 1) return 0; // –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    
    // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: —á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤–º–µ—Å—Ç–æ –≤—Å–µ–≥–æ –ª–∏—Å—Ç–∞
    const data = starsLogSheet.getRange(2, 1, lastRow - 1, 2).getValues();
    
    let totalStars = 0;
    
    // –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ä—Ç–µ
    for (let i = 0; i < data.length; i++) {
      if (String(data[i][0]) === String(cardNumber)) {
        totalStars += parseFloat(data[i][1]) || 0;
      }
    }
    
    return Math.max(0, totalStars);
  } catch (error) {
    console.log("‚ùå Error getting stars:", error);
    return 0;
  }
}

/** ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï API –§–£–ù–ö–¶–ò–ò ===== */
function _resolveUserFromPayload_(payload) {
  console.log("üîç _resolveUserFromPayload_ called with:", JSON.stringify(payload));
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–π –æ–±—ä–µ–∫—Ç user
  var user = (payload && payload.user) || null;
  if (user && user.id) {
    console.log("‚úÖ Found user in payload.user:", user);
    return user;
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ user, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å initData
  if (payload && payload.initData) {
    console.log("üîç Trying to parse initData:", payload.initData);
    user = parseInitUser_(payload.initData);
    if (user && user.id) {
      console.log("‚úÖ Parsed user from initData:", user);
      return user;
    }
  }
  
  // Fallback –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –µ—Å–ª–∏ –µ—Å—Ç—å user –≤ –∫–æ—Ä–Ω–µ payload
  if (payload && payload.tg_id) {
    console.log("üîç Using fallback tg_id:", payload.tg_id);
    return {
      id: payload.tg_id,
      first_name: payload.first_name || 'TestUser',
      username: payload.username || 'testuser'
    };
  }
  
  console.log("‚ùå No valid user found in payload");
  return null;
}

function apiRegister_(payload) {
  console.log("üöÄ apiRegister_ called");
  console.log("üî• VERSION CHECK: gas-main.js updated at 15.09.2025 17:45");
  console.log("üì• Received payload:", JSON.stringify(payload, null, 2));

  ensureHeaders_();

  var user = _resolveUserFromPayload_(payload);
  console.log("üë§ Resolved user:", JSON.stringify(user, null, 2));

  if (!user || !user.id) {
    console.log("‚ùå No valid user for registration");
    return { ok: false, error: 'no telegram user id' };
  }

  // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–¢–õ–ê–î–ö–ê
  if (String(user.id) === '128136200') {
    console.error("‚ùå‚ùå‚ùå BACKEND: Still receiving hardcoded ID 128136200! Frontend not updated!");
  } else {
    console.log("‚úÖ‚úÖ‚úÖ BACKEND: Receiving dynamic user ID:", user.id);
  }
  
  try {
    // API register –ù–ï –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (false)
    var cardNumber = getOrCreateCardForUser_(user, false);
    var stars = getUserStars_(user.id);
    
    console.log("‚úÖ Registration successful - card:", cardNumber, "stars:", stars);
    return { 
      ok: true, 
      card: cardNumber, 
      stars: stars,
      user_id: user.id 
    };
  } catch (error) {
    console.log("‚ùå Registration error:", error);
    return { ok: false, error: String(error) };
  }
}

function apiStars_(payload) {
  console.log("‚≠ê apiStars_ called");
  ensureHeaders_();
  
  var user = _resolveUserFromPayload_(payload);
  if (!user || !user.id) {
    return { ok: false, error: 'no telegram user id' };
  }
  
  try {
    // API stars —Ç–∞–∫–∂–µ –ù–ï –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (false)
    var cardNumber = getOrCreateCardForUser_(user, false);
    var stars = getUserStars_(user.id);
    
    return { 
      ok: true, 
      card: cardNumber, 
      stars: stars 
    };
  } catch (error) {
    console.log("‚ùå Stars API error:", error);
    return { ok: false, error: String(error) };
  }
}

function apiOrder_(payload) {
  console.log("üõí apiOrder_ called");
  ensureHeaders_();
  
  var user = _resolveUserFromPayload_(payload);
  if (!user || !user.id) {
    return { ok: false, error: 'no telegram user id' };
  }
  
  try {
    var cardNumber = getOrCreateCardForUser_(user, false);
    var total = Number(payload.total) || 0;
    var when = payload.when || 'now';
    var table = payload.table;
    var payment = payload.payment || '';
    var items = payload.items || [];
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    var ordersSheet = getSheet_('Orders');
    var orderId = 'o_' + Date.now();
    
    ordersSheet.appendRow([
      orderId,
      user.id,
      cardNumber,
      total,
      when,
      when === 'now' ? (table || '') : '',
      payment,
      JSON.stringify(items),
      new Date()
    ]);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏, –Ω–æ –ù–ï –Ω–∞—á–∏—Å–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    var starsEarned = calculateStarsForAmount_(total);
    var totalStars = getUserStars_(user.id);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ
    sendOrderNotifications_(user, cardNumber, total, when, table, payment, items, starsEarned, totalStars);
    
    return {
      ok: true,
      order_id: orderId,
      card: cardNumber,
      stars: totalStars,
      stars_earned: 0
    };
  } catch (error) {
    console.log("‚ùå Order error:", error);
    return { ok: false, error: String(error) };
  }
}

function sendOrderNotifications_(user, cardNumber, total, when, table, payment, items, starsEarned, totalStars) {
  var nick = user.username ? '@' + user.username : (user.first_name || String(user.id));
  
  var itemsHtml = (items || []).map(function(item) {
    var qty = Number(item.qty) || 0;
    var unitPrice = Number(item.unit_price) || 0;
    var lineTotal = unitPrice * qty;
    return '‚Ä¢ <b>' + (item.title || '') + '</b> √ó' + qty + ' ‚Äî ' + lineTotal + ' RSD';
  }).join('\n');
  
  var whenHtml = (when === 'now') ? 
    ('Now' + (table ? (' ‚Äî <b>table ' + table + '</b>') : '')) : 
    ('+' + when + ' min');
  
  // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã (–∫—É—Ö–Ω—è/–±–∞—Ä–∏—Å—Ç–∞) —Å Telegram ID –∏ username
  var telegramInfo = 'üì± <b>Telegram ID:</b> ' + user.id;
  if (user.username) {
    telegramInfo += ' | <b>@' + user.username + '</b>';
  }

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤–µ–∑–¥–∞—Ö –∫–∞–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
  var starsInfo = starsEarned > 0 ? '\n‚≠ê <b>–ó–≤–µ–∑–¥ –Ω—É–∂–Ω–æ –Ω–∞—á–∏—Å–ª–∏—Ç—å:</b> ' + starsEarned : '';

  var groupHtml = [
    '<b>üßæ ' + t_('newOrder', 'en') + '</b>',
    'üë§ ' + nick,
    telegramInfo,
    'üí≥ <b>' + t_('youCard', 'en') + ':</b> #' + cardNumber,
    '‚è±Ô∏è <b>' + t_('when', 'en') + ':</b> ' + whenHtml,
    'üí∞ <b>' + t_('payment', 'en') + ':</b> ' + payment,
    'üì¶ <b>' + t_('items', 'en') + ':</b>',
    itemsHtml,
    '‚Äî ‚Äî ‚Äî',
    'üíµ <b>' + t_('sum', 'en') + ':</b> ' + total + ' RSD' + starsInfo
  ].join('\n');
  
  // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é (–±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–≤–µ–∑–¥–∞—Ö)
  var lang = langFromUser_(user);
  var thanksMessage = '\n\nüéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!</b>';
    
  var clientHtml = [
    '<b>' + t_('orderReceived', lang) + '</b>',
    'üë§ ' + nick,
    'üí≥ <b>' + t_('youCard', lang) + ':</b> #' + cardNumber,
    '‚è±Ô∏è ' + t_('when', lang) + ': ' + whenHtml,
    'üì¶ ' + t_('items', lang) + ':',
    itemsHtml,
    'üíµ ' + t_('sum', lang) + ': ' + total + ' RSD' + thanksMessage
  ].join('\n');
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
  var groupId = _prop('GROUP_CHAT_ID', '');
  if (groupId) {
    tgSendHTML_(groupId, groupHtml);
  }
  
  tgSendHTML_(user.id, clientHtml);
}

/** ===== –û–ë–†–ê–ë–û–¢–ö–ê TELEGRAM WEBHOOK ===== */
function handleStart_(update) {
  console.log("üéØ handleStart_ called");
  ensureHeaders_();
  
  var user = update.message && update.message.from;
  if (!user || !user.id) {
    console.log("‚ùå No user in start command");
    return;
  }
  
  try {
    // handleStart_ –î–û–õ–ñ–ï–ù –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (true) - —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è /start
    var cardNumber = getOrCreateCardForUser_(user, true);
    console.log("‚úÖ Start command processed successfully");
  } catch (error) {
    console.log("‚ùå Error in handleStart_:", error);
    tgSendHTML_(user.id, '‚ùå Error generating card. Please try again or contact support.');
  }
}

function adjustStarsFromMessage_(text, chatId) {
  // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Ñ–æ—Ä–º–∞—Ç–∞: "1234 +5" –∏–ª–∏ "1234 -2"
  var match = String(text || '').match(/^\s*(\d{4})\s*([+\-])\s*(\d+)\s*$/);
  if (!match) {
    if (chatId) {
      tgSendHTML_(chatId, '‚ùå Invalid format. Use: 1234 +2 or 1234 -1');
    }
    return { ok: false, reason: 'Invalid format' };
  }
  
  var cardNumber = match[1];
  var sign = (match[2] === '-') ? -1 : 1;
  var delta = sign * Number(match[3]);
  
  try {
    ensureHeaders_();
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã
    var cardsSheet = getSheet_('Cards');
    var lastRow = cardsSheet.getLastRow();
    var userTelegramId = null;
    
    if (lastRow > 1) {
      var cardsData = cardsSheet.getRange(2, 1, lastRow - 1, 2).getValues();
      for (var i = 0; i < cardsData.length; i++) {
        if (String(cardsData[i][1]) === cardNumber) {
          userTelegramId = cardsData[i][0];
          break;
        }
      }
    }
    
    if (!userTelegramId) {
      if (chatId) {
        tgSendHTML_(chatId, '‚ùå Card <b>#' + cardNumber + '</b> not found');
      }
      return { ok: false, reason: 'card_not_found' };
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∏–∑ StarsLog
    var currentStars = getCardStars_(cardNumber);

    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–µ –º–µ–Ω—å—à–µ 0)
    var newTotal = Math.max(0, currentStars + delta);

    // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ StarsLog
    var starsLogSheet = getSheet_('StarsLog');
    starsLogSheet.appendRow([cardNumber, delta, 'manual_adjustment', new Date()]);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–∞—Å—Å–∏—Ä–∞
    if (chatId) {
      var signText = (delta >= 0 ? '+' + delta : String(delta));
      tgSendHTML_(chatId, '‚úÖ Stars updated for card <b>#' + cardNumber + '</b>: ' + signText + ' ‚Üí total <b>' + newTotal + '</b>');
    }
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userTelegramId) {
      var message = '';
      if (delta > 0) {
        message = 'üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>' + delta + '</b> –∑–≤–µ–∑–¥' + (delta > 1 ? '—ã' : '—É') + '!\n‚≠ê –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å <b>' + newTotal + '</b> –∑–≤–µ–∑–¥' + (newTotal > 1 ? '' : '–∞');
      } else if (delta < 0) {
        message = '‚≠ê –£ –≤–∞—Å —Å–ø–∏—Å–∞–Ω–æ <b>' + Math.abs(delta) + '</b> –∑–≤–µ–∑–¥' + (Math.abs(delta) > 1 ? '' : '–∞') + '.\nüí´ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å <b>' + newTotal + '</b> –∑–≤–µ–∑–¥' + (newTotal > 1 ? '' : '–∞');
      }
      if (message) {
        tgSendHTML_(userTelegramId, message);
      }
    }
    
    return { 
      ok: true, 
      card: cardNumber, 
      delta: delta, 
      total: newTotal 
    };
    
  } catch (error) {
    console.log("‚ùå Error adjusting stars:", error);
    if (chatId) {
      tgSendHTML_(chatId, '‚ùå Error updating stars: ' + String(error));
    }
    return { ok: false, reason: String(error) };
  }
}

/** ===== –û–°–ù–û–í–ù–´–ï ENTRY POINTS ===== */
function doPost(e) {
  console.log("üì• doPost called");
  
  var body = e && e.postData && e.postData.contents ? e.postData.contents : '{}';
  console.log("üìÑ Request body:", body);
  
  var data = {};
  try { 
    data = JSON.parse(body); 
  } catch (e2) { 
    console.log("‚ùå Failed to parse JSON body:", e2);
    data = {}; 
  }
  
  // API endpoints
  if (data && data.action === 'register') {
    console.log("üéØ Processing register action");
    return json(apiRegister_(data));
  }
  
  if (data && data.action === 'stars') {
    console.log("‚≠ê Processing stars action");
    return json(apiStars_(data));
  }
  
  if (data && data.action === 'order') {
    console.log("üõí Processing order action");
    return json(apiOrder_(data));
  }
  
  // Telegram webhook
  if (data && data.message) {
    var text = data.message.text || '';
    var chatId = data.message.chat && data.message.chat.id;
    
    console.log("üí¨ Processing Telegram message:", text, "from chat:", chatId);
    
    if (/^\/start/.test(text)) {
      handleStart_(data);
      return simpleOk();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
    var allowedChats = [
      _prop('CASHIER_GROUP_ID', ''),
      _prop('GROUP_CHAT_ID', '')
    ].filter(Boolean);
    
    var isAllowedChat = allowedChats.some(function(allowedId) {
      return String(chatId) === String(allowedId);
    });
    
    if (!isAllowedChat) {
      console.log("‚ÑπÔ∏è Message from non-allowed chat, ignoring");
      return simpleOk();
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤–µ–∑–¥–∞–º–∏
    var result = adjustStarsFromMessage_(text, chatId);
    return simpleOk();
  }
  
  console.log("‚ÑπÔ∏è Unknown request type");
  return json({ ok: true, echo: data || null });
}

function doGet(e) {
  console.log("üì• doGet called");
  
  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç
  if (e && e.parameter && e.parameter.test === 'card') {
    try {
      var testCard = nextCardNumber_();
      return json({ 
        ok: true, 
        test_card: testCard, 
        length: testCard.length,
        is_valid: testCard.length === 4 && !isNaN(testCard)
      });
    } catch (error) {
      return json({ 
        ok: false, 
        error: String(error) 
      });
    }
  }
  
  return json({ 
    ok: true, 
    ts: Date.now(),
    version: "FIXED_LOYALTY_v1.0"
  });
}

function ping() { 
  return HtmlService.createHtmlOutput("ok"); 
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∫–∞—Ä—Ç
function fixExistingCards() {
  console.log("üîß Starting fixExistingCards...");
  
  try {
    ensureHeaders_();
    
    var cardsSheet = getSheet_('Cards');
    var lastRow = cardsSheet.getLastRow();
    var fixed = 0;
    
    if (lastRow <= 1) {
      return "No cards to fix";
    }
    
    var cardsData = cardsSheet.getRange(2, 1, lastRow - 1, 5).getValues();
    
    for (var i = 0; i < cardsData.length; i++) {
      var cardNumber = String(cardsData[i][1]);
      var telegramId = cardsData[i][0];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ä—Ç—É
      if (!cardNumber || cardNumber.length !== 4 || isNaN(cardNumber) || cardNumber === 'undefined') {
        var newCard = nextCardNumber_();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ Cards
        cardsSheet.getRange(i + 2, 2).setValue(newCard);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ Users
        var usersSheet = getSheet_('Users');
        var usersLastRow = usersSheet.getLastRow();
        
        if (usersLastRow > 1) {
          var usersData = usersSheet.getRange(2, 1, usersLastRow - 1, 5).getValues();
          for (var j = 0; j < usersData.length; j++) {
            if (String(usersData[j][0]) === String(telegramId)) {
              usersSheet.getRange(j + 2, 3).setValue(newCard);
              break;
            }
          }
        }
        
        console.log("Fixed card for user", telegramId, "from", cardNumber, "to", newCard);
        fixed++;
      }
    }
    
    return "Fixed " + fixed + " cards";
    
  } catch (error) {
    console.log("‚ùå Error in fixExistingCards:", error);
    return "Error: " + String(error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function migrateOldStarsToStarsLog() {
  console.log("üîÑ Migrating old stars from Users table to StarsLog...");
  
  try {
    ensureHeaders_();
    
    var usersSheet = getSheet_('Users');
    var starsLogSheet = getSheet_('StarsLog');
    var cardsSheet = getSheet_('Cards');
    
    var usersData = usersSheet.getDataRange().getValues();
    var cardsData = cardsSheet.getDataRange().getValues();
    
    var migrated = 0;
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–Ω–∞—á–∏–Ω–∞–µ–º —Å –∏–Ω–¥–µ–∫—Å–∞ 1)
    for (var i = 1; i < usersData.length; i++) {
      var telegramId = usersData[i][0];
      var oldStars = parseFloat(usersData[i][3]) || 0;
      
      if (oldStars > 0) {
        // –ù–∞–π—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ telegram ID
        var cardNumber = null;
        for (var j = 1; j < cardsData.length; j++) {
          if (String(cardsData[j][0]) === String(telegramId)) {
            cardNumber = cardsData[j][1];
            break;
          }
        }
        
        if (cardNumber) {
          // –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–≤–µ–∑–¥—ã –≤ StarsLog
          starsLogSheet.appendRow([
            cardNumber,
            oldStars,
            '–ú–∏–≥—Ä–∞—Ü–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã',
            new Date()
          ]);
          
          // –û–±–Ω—É–ª–∏—Ç—å –∑–≤–µ–∑–¥—ã –≤ Users —Ç–∞–±–ª–∏—Ü–µ
          usersSheet.getRange(i + 1, 4, 1, 1).setValue(0);
          
          migrated++;
          console.log(`‚úÖ Migrated ${oldStars} stars for card ${cardNumber}`);
        }
      }
    }
    
    console.log(`üéâ Migration completed! Migrated ${migrated} star records.`);
    return { ok: true, migrated: migrated };
  } catch (error) {
    console.log("‚ùå Migration error:", error);
    return { ok: false, error: String(error) };
  }
}

function testStarsCalculation() {
  console.log("üß™ Testing stars calculation:");
  
  var testCases = [
    { amount: 100, expected: 1 },
    { amount: 350, expected: 1 },
    { amount: 351, expected: 2 },
    { amount: 700, expected: 2 },
    { amount: 701, expected: 3 },
    { amount: 1000, expected: 3 },
    { amount: 1050, expected: 3 },
    { amount: 1051, expected: 4 }
  ];
  
  testCases.forEach(function(test) {
    var result = calculateStarsForAmount_(test.amount);
    var status = result === test.expected ? "‚úÖ" : "‚ùå";
    console.log(`${status} ${test.amount} RSD = ${result} –∑–≤–µ–∑–¥ (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${test.expected})`);
  });
  
  return { ok: true, message: "Stars calculation test completed" };
}

function getStats() {
  try {
    ensureHeaders_();
    
    var cardsSheet = getSheet_('Cards');
    var usersSheet = getSheet_('Users');
    var ordersSheet = getSheet_('Orders');
    
    return {
      total_cards: Math.max(0, cardsSheet.getLastRow() - 1),
      total_users: Math.max(0, usersSheet.getLastRow() - 1),
      total_orders: Math.max(0, ordersSheet.getLastRow() - 1),
      timestamp: new Date()
    };
  } catch (error) {
    return { error: String(error) };
  }
}